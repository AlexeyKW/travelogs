# -*- coding: utf-8 -*-
"""
/***************************************************************************
 travelogs_processing
                                 A QGIS plugin
 Анализ травелогов
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-04-02
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Alexey Kolesnikov
        email                : alexeykw@mail.ru
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .travelogs_processing_dialog import travelogs_processingDialog
import os.path
import spacy


class travelogs_processing:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'travelogs_processing_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Анализ травелогов')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('travelogs_processing', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/travelogs_processing/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Анализ травелогов'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Анализ травелогов'),
                action)
            self.iface.removeToolBarIcon(action)

    def create_results_layer(self):
        layer = QgsVectorLayer("Point?crs=EPSG:4326", "NER Geocoding Results", "memory")
        provider = layer.dataProvider()
        
        # Добавляем поля
        provider.addAttributes([
            QgsField("entity", QVariant.String),
            QgsField("type", QVariant.String),
            QgsField("address", QVariant.String),
            QgsField("latitude", QVariant.Double),
            QgsField("longitude", QVariant.Double)
        ])
        layer.updateFields()
        
        # Настраиваем символы
        renderer = layer.renderer()
        symbol = renderer.symbol()
        symbol.setColor(QColor(255, 0, 0))
        symbol.setSize(3)
        
        return layer
    
    def add_feature_to_layer(self, layer, entity, lat, lon):
        feat = QgsFeature()
        feat.setGeometry(QgsPointXY(lon, lat))
        feat.setAttributes([
            entity,
            "LOC/GPE",
            self.geolocator.reverse(f"{lat}, {lon}").address,
            float(lat),
            float(lon)
        ])
        layer.dataProvider().addFeature(feat)
        layer.updateExtents()


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = travelogs_processingDialog()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            try:
                self.nlp = spacy.load("ru_core_web_sm")
            except OSError:
                self.result_label.setText("Error: spaCy model 'en_core_web_sm' not found. Please install it first.")
                self.analyze_button.setEnabled(False)
            text = self.dlg.text_edit.toPlainText()
            if not text.strip():
                self.result_label.setText("Please enter some text to analyze.")
                return
            doc = self.nlp(text)
            loc_entities = []
            gpe_entities = []
            for ent in doc.ents:
                if ent.label_ == "LOC":
                    loc_entities.append(ent.text)
                elif ent.label_ == "GPE":
                    gpe_entities.append(ent.text)
            all_entities = loc_entities + gpe_entities
            unique_entities = list(set(all_entities))  
                
            layer = self.create_results_layer()
            success_count = 0
            for i, entity in enumerate(unique_entities):
                try:
                    location = self.geocode(entity)
                    if location:
                        self.add_feature_to_layer(layer, entity, location.latitude, location.longitude)
                        result_text += f"{entity} → {location.latitude:.4f}, {location.longitude:.4f}<br>"
                        success_count += 1
                    else:
                        result_text += f"{entity} → Not found<br>"
                except (GeocoderTimedOut, GeocoderUnavailable) as e:
                        result_text += f"{entity} → Geocoding error: {str(e)}<br>"
                except Exception as e:
                        result_text += f"{entity} → Error: {str(e)}<br>"
                
                result_text += f"<br>Successfully geocoded {success_count} of {len(unique_entities)} entities."
                QgsProject.instance().addMapLayer(layer)
                self.dlg.result_label.setText(result_text)
            
            pass
